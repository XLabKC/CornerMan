#!/usr/bin/env node

var coffee = require('coffee-script');
var fs = require('fs');
var Mincer = require('mincer');
var path = require('path');
var config = require('../package.json');
var UglifyJS = require('uglify-js2');
var Insist = require('insist-types');

/** Create mincer environment. */
var environment = new Mincer.Environment();
environment.appendPath(path.join(__dirname, '../src'));
var asset = environment.findAsset(path.join(__dirname, '../src/export.js'));

generateFullSource(asset, true);
generateFullSource(asset, false);
generateMinifiedSource(asset, true);
generateMinifiedSource(asset, false);

/**
 * Generators
 */
function generateFullSource(asset, includeTypeAsserts) {
   source = wrapInFunction(asset.toString());
   if (!includeTypeAsserts) {
      source = removeInsist(source);
   }
   // Remove require comments.
   source = source.replace(/\s*\/\/\s*\(=\)\srequire\s[\w/.-]+/g, '');
   source = source.replace(/\n\s*\n\n+/g, '');
   source = prependCommentHeader(source);
   outputSource(source, includeTypeAsserts ? 'debug.asserts' : 'debug');
}

function generateMinifiedSource(source, includeTypeAsserts) {
   source = wrapInFunction(source);
   if (!includeTypeAsserts) {
      source = removeInsist(source);
   }
   console.log(source)
   source = uglify(source, {beautify: false});
   source = prependCommentHeader(source);
   outputSource(source, includeTypeAsserts ? 'min.asserts' : 'min')
}

/**
 * Helpers
 */
function wrapInFunction(source) {
   return '(function() {\n' + source + '\n})();\n';
}

function removeInsist(source) {
   var remover = new Insist.Remover({
      aliases: {
         args: 'cm.assertArgs',
         ofType: 'cm.assertOfType'
      }
   });
   return remover.removeInsist(source);
}

function uglify(source) {
   
   // Compress.
   var ast = UglifyJS.parse(source);
   ast.figure_out_scope();
   var compressorOptions = {
      sequences     : true,  // join consecutive statemets with the “comma operator”
      properties    : true,  // optimize property access: a["foo"] → a.foo
      dead_code     : true,  // discard unreachable code
      drop_debugger : true,  // discard “debugger” statements
      unsafe        : true,      // some unsafe optimizations (see below)
      conditionals  : true,  // optimize if-s and conditional expressions
      comparisons   : true,  // optimize comparisons
      evaluate      : true,  // evaluate constant expressions
      booleans      : true,  // optimize boolean expressions
      loops         : true,  // optimize loops
      unused        : true,  // drop unused variables/functions
      hoist_funs    : true,  // hoist function declarations
      hoist_vars    : true,      // hoist variable declarations
      if_return     : true,  // optimize if-s followed by return/continue
      join_vars     : true,  // join var declarations
      cascade       : true,  // try to cascade `right` into `left` in sequences
      side_effects  : true  // drop side-effect-free statements
   }
   var compressor = UglifyJS.Compressor(compressorOptions);
   ast = ast.transform(compressor);
   
   // Mangle.
   ast.figure_out_scope();
   ast.compute_char_frequency();
   ast.mangle_names();

   return ast.print_to_string();
}

function prependCommentHeader(source) {
   return '/**\n' +
          ' * CornerMan JavaScript library v' + config.version + '\n' +
          ' * License: MIT (http://www.opensource.org/licenses/mit-license.php)\n' +
          ' */\n' + source;
}

function outputSource(source, fileNameAddition) {
   var fileNameAddition = fileNameAddition ? '.' + fileNameAddition : '';
   var directory = path.join(__dirname, '../out', config.version);
   var filename = 'corner-man-' + config.version + fileNameAddition + '.js';
   var filePath = path.join(directory, filename);
   // Create directory if it doesn't exist.
   if (!fs.existsSync(directory)) fs.mkdirSync(directory);
   fs.writeFileSync(filePath, source, 'utf8');
}
